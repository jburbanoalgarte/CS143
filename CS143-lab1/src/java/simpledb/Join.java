package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private JoinPredicate p=null;
    private DbIterator[] children=null;
    private Tuple t1=null; //t1 and found must always be reset
    private boolean found=false; //
    
    /**
     * Constructor. Accepts to children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, DbIterator child1, DbIterator child2) {
        // some code goes here
    	this.p=p;
    	this.children=new DbIterator[]{child1, child2};
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        //return null;
    	return p;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        //return null;
		try {
			children[0].open();
		} catch(Exception e)
		{
			System.out.println("Exception: Failed to open DbIterator in Join.getJoinField1Name()");
		}
		String ans = "";
		try {
			String tableName = Database.getCatalog().getTableName( children[0].next().getRecordId().getPageId().getTableId() );
			String fieldName = children[0].getTupleDesc().getFieldName(p.getField1());
    	 
			ans = ( tableName + "." + fieldName );
			children[0].close();
		} catch(Exception e)
		{
			System.out.println("Exception: Failed to access next tuple in Join.getField1Name()");
		}
		return ans;
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        //return null;
		try {
			children[1].open();
		} catch(Exception e)
		{
			System.out.println("Exception: Failed to open DbIterator in Join.getJoinField2Name()");
		}
		String ans = "";
		try {
			String tableName = Database.getCatalog().getTableName( children[1].next().getRecordId().getPageId().getTableId() );
			String fieldName = children[1].getTupleDesc().getFieldName(p.getField2());
			 
			ans = ( tableName + "." + fieldName );
			children[1].close();
		} catch(Exception e)
		{
			System.out.println("Exception: Failed to access next tuple in Join.getField2Name()");
		}
		return ans;
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        //return null;
    	return TupleDesc.merge(children[0].getTupleDesc(),children[1].getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
    	for(int i=0;i<children.length;i++)
    		children[i].open();
    	super.open();
    	t1=null;
    	found=false;
    }

    public void close() {
        // some code goes here
    	super.close();
    	for(int i=0;i<children.length;i++)
    		children[i].close();
    	t1=null;
    	found=false;
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
    	for(int i=0;i<children.length;i++)
    		children[i].rewind();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        //return null;
    	Tuple t2=null;
    	while(children[0].hasNext()||found){
    		if(!found)
    			t1 = children[0].next();
    		
            while(children[1].hasNext()){
            	t2 = children[1].next();
            	
            	if(p.filter(t1, t2)){
            		found=true;
            		Tuple newTuple = new Tuple(getTupleDesc());
            		for(int i=0;i<newTuple.getTupleDesc().numFields();i++){
            			if(i<t1.getTupleDesc().numFields()){
            				newTuple.setField(i, t1.getField(i));
            			}else{
            				newTuple.setField(i, t2.getField(i-t1.getTupleDesc().numFields()));
            			}
            		}
            		//System.out.println("Join.fetchNext(): "+newTuple.toString());
            		return newTuple;
            	}//if
            	
            }
            children[1].rewind();
            t1=null;
            found=false;
        }
    	//System.out.println("Join.fetchNext(): NULL!!");
    	t1=null;
    	found=false;
    	return null;
    }

    @Override
    public DbIterator[] getChildren() {
        // some code goes here
        //return null;
    	return children;
    }

    @Override
    public void setChildren(DbIterator[] children) {
        // some code goes here
    	this.children=children;
    }

}
